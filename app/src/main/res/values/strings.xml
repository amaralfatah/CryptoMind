<resources>
    <string name="app_name">CryptoMind</string>
    <string name="score_format">Score: %d</string>
    <string name="enkripsi">Enkripsi</string>
    <string name="dekripsi">Dekripsi</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <!-- Strings used for fragments for navigation -->
    <string name="first_fragment_label">First Fragment</string>
    <string name="second_fragment_label">Second Fragment</string>
    <string name="next">Next</string>
    <string name="previous">Previous</string>

    <string name="pendahuluan">Pendahuluan</string>
    <string name="materi_algoritma_cipher_feedback">Materi Algoritma Cipher Feedback</string>
    <string name="intro">\tKeamanan informasi menjadi semakin krusial di era digital ini, di mana pesan-pesan rahasia dapat dengan mudah terpapar oleh pihak yang tidak berhak. Salah satu cara untuk melindungi pesan-pesan ini adalah dengan menggunakan algoritma kriptografi. Salah satu algoritma yang cukup populer diantaranya adalah Chiper Feedback (CFB).</string>
    <string name="intro2">\tMari kita telusuri lebih dalam tentang algoritma ini dan bagaimana ia dapat memastikan keamanan pesan kita.</string>
    <string name="cfb_title">Apa itu Chiper Feedback (CFB)?</string>
    <string name="cfb_materi">Cipher Feedback (CFB) adalah salah satu mode operasi kriptografi blok yang digunakan untuk mengenkripsi data dalam unit-unit yang lebih kecil daripada ukuran blok kunci. Mode ini memungkinkan enkripsi data yang tidak mencapai ukuran satu blok kunci, yang berguna dalam beberapa kasus di mana data yang akan dienkripsi tidak memiliki panjang yang sesuai dengan ukuran blok yang digunakan dalam algoritma enkripsi.</string>
    <string name="cfb_title_poin">Di bawah ini adalah beberapa poin dari algoritma CFB :</string>
    <string name="cfb_poin1">Data dienkripsi dalam unit yang lebih kecil daripada ukuran blok.</string>
    <string name="cfb_poin2">Unit data yang dienkripsi panjangnya bisa 1 bit, 2 bit, 4-bit, 8 bit dan lain-lain.</string>
    <string name="cfb_poin3">Bila unit yang dienkripsi adalah satu karakter setiap kalinya, maka mode CFB-nya disebut CFB 8-bit.</string>
    <string name="cfb_poin4"><![CDATA[CFB r-bit mengenkripsi plainteks sebanyak r bit setiap kalinya, r <= n(n = ukuran blok).]]></string>
    <string name="cfb_poin5">Dengan kata lain, CFB r-bit meperlakukan cipher blok sama seperti pada cipher alir.</string>
    <string name="cfb_poin6">Mode CFB membutuhkan sebuah antrian (queue) yang berukuran sama dengan ukuran blok masukan.</string>
    <string name="cfb_poin7">Antrian pertama diisi dengan initialization vector (IV)</string>

    <string name="enkripsi_title">Enkripsi dengan CFB</string>
    <string name="enkripsi_ket_gambar">Perhatikan proses enkripsi mode CFB 8-bit yang bekerja pada blok berukuran 64-bit (setara dengan 8 byte) pada gambar berikut</string>
    <string name="enkripsi_materi">\tProses enkripsi dengan CFB dimulai dengan membagi pesan asli menjadi blok-blok yang lebih kecil. Setiap blok pesan akan di-encrypt dengan menggunakan blok sebelumnya sebagai input. Inilah yang membuat CFB menjadi unik, karena blok sebelumnya di-feedback ke proses enkripsi. Hasil output dari enkripsi kemudian akan di-XOR (eksklusif OR) dengan blok pesan berikutnya. Proses ini diulang hingga seluruh pesan terenkripsi.</string>
    <string name="enkripsi_rumus">Ci = Pi ⊕ MSBr(EK (Xi)) \nXi+1 = LSBn – r(Xi) || Ci</string>
    <string name="enkripsi_ket_rumus">\tSecara matematis, proses enkripsi CFB r-bit dapat dinyatakan sebagai :</string>

    <string name="keterangan_rumus">Keterangan : \n\t\t\ti = 1, 2, 3, …, m. \n\t\t\tXi = isi antrian dengan X1 adalah IV \n\t\t\tE = fungsi enkripsi \n\t\t\tK = kunci \n\t\t\tn = panjang blok enkripsi \n\t\t\tr = panjang unit enkripsi \n\t\t\t|| = operator penyambungan (concatenation)</string>

    <string name="dekripsi_title">Deskripsi dengan CFB</string>
    <string name="dekripsi_ket_gambar">Berikut adalah gambaran proses dekripsi mode CFB 8-bit yang bekerja pada blok berukuran 64-bit (setara dengan 8 byte)</string>
    <string name="dekripsi_materi">\tUntuk proses deskripsi, CFB melakukan hal yang mirip dengan enkripsi. Blok pesan terenkripsi di-decrypt dengan menggunakan blok sebelumnya sebagai input, dan hasil output kemudian di-XOR dengan blok pesan berikutnya. Dengan menggunakan kunci yang sama, CFB dapat dengan mudah mengembalikan pesan ke bentuk aslinya.</string>
    <string name="dekripsi_ket_rumus">\tSecara matematis, proses dekripsi CFB r-bit dapat dinyatakan sebagai :</string>
    <string name="dekripsi_rumus">Pi = Ci ⊕ MSBr(EK (Xi)) \nXi+1 = LSBn – r(Xi) || Ci</string>

    <string name="keamanan_title">Keamanan CFB</string>
    <string name="keamanan_materi1">\tPada proses enkripsi, kesalahan 1-bit pada blok plaintext akan merambat pada blok-blok cipherteks yang bersangkutan dan blok-blok ciphertext selanjutnya.</string>
    <string name="keamanan_materi2">\tSedangkan pada proses dekripsi, kesalahan 1-bit hanya berpengaruh pada blok yang bersangkutan dan satu blok setelahnya</string>
    <string name="enkripsi_langkah_title">Langkah Enkripsi CFB</string>
    <string name="enkripsi_langkah_ket">Dibawah ini merupakan langkah-langkah proses enkripsi cfb r-bit :</string>
    <string name="enkripsi_langkah">- Isi antrian pertama (X1) dengan Initialization Vector (IV) sebanyak n-blok.\n- Enkripsi antrian menggunakan kunci (k).\n- hasil enkripsi tersebut diambil blok yang paling kiri lalu di xor-kan dengan Plaintext (Pi) sebanyak r-bit dan akan menghasilkan Ciphertext (Ci) sebanyak r-bit pula.\n- Salinan Ci disimpan pada blok paling kanan antrian.</string>
    <string name="play">Play</string>
    <string name="pause">Pause</string>
    <string name="finish">Finish</string>
</resources>